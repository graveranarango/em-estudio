// Tipos para el sistema completo de Podcasts y Contenido Educativo

export interface PodcastProject {
  id: string;
  title: string;
  type: 'podcast' | 'educational';
  status: 'briefing' | 'recording' | 'transcribing' | 'highlighting' | 'publishing' | 'completed';
  briefing: PodcastBriefing;
  recording: PodcastRecording;
  transcription: PodcastTranscription;
  highlights: PodcastHighlight[];
  clips: PodcastClip[];
  publishing: PodcastPublishing;
  createdAt: Date;
  updatedAt: Date;
  brandKitCompliant: boolean;
}

export interface PodcastBriefing {
  description: string;
  contentType: PodcastContentType;
  targetDuration: PodcastDuration;
  contentStyle: PodcastStyle;
  targetAudience: string;
  chatHistory: PodcastChatMessage[];
  outline: PodcastOutline;
  objectives: string[];
  keyMessages: string[];
  callToActions: string[];
}

export interface PodcastChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  attachments?: string[];
  suggestions?: string[];
}

export type PodcastContentType = 'podcast_interview' | 'podcast_monologue';

export interface PodcastDuration {
  minutes: number;
  label: string;
  segments: number; // Número de segmentos sugeridos
}

export type PodcastStyle = 'conversational' | 'professional' | 'academic' | 'motivational' | 'storytelling' | 'technical' | 'casual';

export interface PodcastOutline {
  segments: PodcastSegment[];
  totalEstimatedDuration: number;
  introduction: string;
  conclusion: string;
  transitionPhrases: string[];
}

export interface PodcastSegment {
  id: string;
  title: string;
  description: string;
  estimatedDuration: number;
  keyPoints: string[];
  order: number;
  type: 'intro' | 'main_content' | 'discussion' | 'qa' | 'conclusion' | 'cta';
}

export interface PodcastRecording {
  status: 'not_started' | 'recording' | 'paused' | 'completed' | 'uploaded';
  audioFile?: File | string;
  videoFile?: File | string;
  recordingMethod: 'browser_audio' | 'browser_video' | 'upload_audio' | 'upload_video';
  duration?: number;
  quality: RecordingQuality;
  metadata: RecordingMetadata;
  liveGuidance: LiveGuidanceState;
}

export interface RecordingQuality {
  audioSampleRate: number;
  audioBitrate: number;
  videoResolution?: string;
  videoBitrate?: number;
  format: string;
}

export interface RecordingMetadata {
  startTime?: Date;
  endTime?: Date;
  fileSize?: number;
  deviceInfo?: string;
  environment?: 'quiet' | 'normal' | 'noisy';
}

export interface LiveGuidanceState {
  currentSegment: number;
  suggestions: string[];
  brandReminders: string[];
  paceGuidance: 'slow_down' | 'speed_up' | 'good_pace';
  energyLevel: 'low' | 'medium' | 'high';
}

export interface PodcastTranscription {
  status: 'not_started' | 'processing' | 'completed' | 'error';
  segments: TranscriptSegment[];
  confidence: number;
  language: string;
  wordCount: number;
  editHistory: TranscriptEdit[];
  brandAlignment: BrandAlignmentCheck;
}

export interface TranscriptSegment {
  id: string;
  startTime: number; // seconds
  endTime: number; // seconds
  speaker?: string;
  text: string;
  confidence: number;
  isEdited: boolean;
  brandFlags: BrandFlag[];
  emotions: EmotionDetection;
}

export interface TranscriptEdit {
  id: string;
  segmentId: string;
  originalText: string;
  editedText: string;
  timestamp: Date;
  reason: 'accuracy' | 'brand_alignment' | 'clarity' | 'style';
}

export interface BrandFlag {
  type: 'tone_mismatch' | 'off_brand_language' | 'missing_brand_terms' | 'inconsistent_voice';
  severity: 'low' | 'medium' | 'high';
  suggestion: string;
  segmentId: string;
}

export interface EmotionDetection {
  primary: 'neutral' | 'enthusiastic' | 'calm' | 'serious' | 'excited' | 'confused';
  confidence: number;
  energy: number; // 0-1 scale
}

export interface BrandAlignmentCheck {
  overallScore: number; // 0-100
  toneConsistency: number;
  vocabularyAlignment: number;
  messageClarity: number;
  recommendations: string[];
}

export interface PodcastHighlight {
  id: string;
  startTime: number;
  endTime: number;
  title: string;
  description: string;
  transcript: string;
  score: number; // AI-generated relevance score
  type: HighlightType;
  autoGenerated: boolean;
  approved: boolean;
  socialPlatforms: SocialPlatform[];
}

export type HighlightType = 'key_insight' | 'funny_moment' | 'quotable' | 'actionable_tip' | 'story' | 'introduction' | 'conclusion';

export type SocialPlatform = 'instagram_reel' | 'tiktok' | 'youtube_shorts' | 'linkedin_video' | 'twitter_video';

export interface PodcastClip {
  id: string;
  highlightId: string;
  platform: SocialPlatform;
  title: string;
  description: string;
  duration: number;
  format: ClipFormat;
  captions: CaptionSegment[];
  visualElements: ClipVisualElement[];
  brandElements: AppliedClipBrandElements;
  status: 'generating' | 'ready' | 'published';
  publishedUrl?: string;
}

export interface ClipFormat {
  width: number;
  height: number;
  aspectRatio: string; // '9:16', '1:1', '16:9'
  framerate: number;
  bitrate: number;
}

export interface CaptionSegment {
  id: string;
  startTime: number;
  endTime: number;
  text: string;
  style: CaptionStyle;
  position: CaptionPosition;
}

export interface CaptionStyle {
  fontFamily: string;
  fontSize: number;
  fontWeight: string;
  color: string;
  backgroundColor?: string;
  borderColor?: string;
  shadow?: string;
  animation?: CaptionAnimation;
}

export type CaptionAnimation = 'none' | 'fade_in' | 'slide_up' | 'type_writer' | 'bounce' | 'zoom_in';

export interface CaptionPosition {
  x: number; // percentage
  y: number; // percentage
  width: number; // percentage
  height: number; // percentage
  alignment: 'left' | 'center' | 'right';
}

export interface ClipVisualElement {
  id: string;
  type: 'logo' | 'background' | 'overlay' | 'progress_bar' | 'brand_frame';
  position: CaptionPosition;
  style: any;
  animationIn?: string;
  animationOut?: string;
  visible: boolean;
}

export interface AppliedClipBrandElements {
  colors: Array<{ name: string; hex: string; usage: string }>;
  fonts: Array<{ name: string; family: string; weight: string }>;
  logos: Array<{ name: string; url: string; position: string }>;
  voiceTone: string;
  brandFrames: string[];
}

export interface PodcastPublishing {
  podcastPlatforms: PodcastPublishingPlatform[];
  clipsPlatforms: ClipPublishingPlatform[];
  scheduledDate?: Date;
  status: 'draft' | 'scheduled' | 'publishing' | 'published' | 'failed';
  metadata: PublishingMetadata;
  distribution: DistributionSettings;
}

export interface PodcastPublishingPlatform {
  platform: 'spotify' | 'apple_podcasts' | 'google_podcasts' | 'youtube' | 'linkedin' | 'website';
  accountId?: string;
  customTitle?: string;
  customDescription?: string;
  customTags?: string[];
  scheduledTime?: Date;
  status: 'pending' | 'scheduled' | 'published' | 'failed';
  publishedUrl?: string;
}

export interface ClipPublishingPlatform {
  platform: SocialPlatform;
  clipIds: string[];
  scheduledTimes: Date[];
  status: 'pending' | 'scheduled' | 'published' | 'failed';
  campaignName?: string;
}

export interface PublishingMetadata {
  category: string;
  tags: string[];
  language: string;
  isExplicit: boolean;
  episode?: number;
  season?: number;
  series?: string;
}

export interface DistributionSettings {
  rss: boolean;
  embedCode: boolean;
  downloadLink: boolean;
  socialSharing: boolean;
  analytics: boolean;
}

// Configuraciones predefinidas
export const PODCAST_CONTENT_CONFIGS: Record<PodcastContentType, {
  durations: PodcastDuration[];
  styles: PodcastStyle[];
  platforms: string[];
  segmentTypes: string[];
  clipPotential: 'high' | 'medium' | 'low';
}> = {
  podcast_interview: {
    durations: [
      { minutes: 30, label: '30 min (Corta)', segments: 4 },
      { minutes: 60, label: '1 hora (Estándar)', segments: 6 },
      { minutes: 90, label: '1.5 horas (Extendida)', segments: 8 }
    ],
    styles: ['conversational', 'professional', 'storytelling'],
    platforms: ['spotify', 'apple_podcasts', 'youtube', 'google_podcasts'],
    segmentTypes: ['intro', 'guest_intro', 'main_discussion', 'qa', 'conclusion'],
    clipPotential: 'high'
  },
  podcast_monologue: {
    durations: [
      { minutes: 10, label: '10 min (Corto)', segments: 3 },
      { minutes: 20, label: '20 min (Estándar)', segments: 4 },
      { minutes: 35, label: '35 min (Extendido)', segments: 6 }
    ],
    styles: ['motivational', 'professional', 'academic', 'storytelling'],
    platforms: ['spotify', 'apple_podcasts', 'google_podcasts', 'youtube'],
    segmentTypes: ['intro', 'main_topic', 'personal_perspective', 'examples', 'conclusion', 'cta'],
    clipPotential: 'high'
  }
};

export const PLATFORM_CLIP_SPECS: Record<SocialPlatform, {
  maxDuration: number; // seconds
  aspectRatio: string;
  resolution: { width: number; height: number };
  features: string[];
}> = {
  instagram_reel: {
    maxDuration: 90,
    aspectRatio: '9:16',
    resolution: { width: 1080, height: 1920 },
    features: ['Captions', 'Stickers', 'Música', 'Hashtags']
  },
  tiktok: {
    maxDuration: 180,
    aspectRatio: '9:16',
    resolution: { width: 1080, height: 1920 },
    features: ['Captions auto', 'Efectos', 'Música trending', 'Hashtags']
  },
  youtube_shorts: {
    maxDuration: 60,
    aspectRatio: '9:16',
    resolution: { width: 1080, height: 1920 },
    features: ['Captions', 'Thumbnails', 'Hashtags', 'Shorts shelf']
  },
  linkedin_video: {
    maxDuration: 600,
    aspectRatio: '16:9',
    resolution: { width: 1920, height: 1080 },
    features: ['Captions', 'Professional tone', 'Hashtags', 'Articles']
  },
  twitter_video: {
    maxDuration: 140,
    aspectRatio: '16:9',
    resolution: { width: 1280, height: 720 },
    features: ['Captions', 'Thread integration', 'Hashtags']
  }
};

// Canvas states para diferentes fases
export interface PodcastCanvasState {
  currentPhase: 'briefing' | 'recording' | 'transcription' | 'highlights' | 'publishing';
  recording: {
    isRecording: boolean;
    isPaused: boolean;
    currentTime: number;
    volume: number;
    devicePermissions: {
      audio: boolean;
      video: boolean;
    };
  };
  transcription: {
    currentSegment: number;
    playbackTime: number;
    isPlaying: boolean;
    selectedSegments: string[];
    editMode: boolean;
  };
  highlights: {
    selectedHighlights: string[];
    previewClip?: string;
    filterType: HighlightType | 'all';
    sortBy: 'score' | 'duration' | 'type';
  };
}

export interface RecordingControls {
  start: () => void;
  pause: () => void;
  resume: () => void;
  stop: () => void;
  getCurrentTime: () => number;
  getVolume: () => number;
  setVolume: (volume: number) => void;
}

export interface TranscriptionControls {
  play: () => void;
  pause: () => void;
  seekTo: (time: number) => void;
  getCurrentTime: () => number;
  setPlaybackRate: (rate: number) => void;
  jumpToSegment: (segmentId: string) => void;
}