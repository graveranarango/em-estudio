import { useState, useRef, useEffect } from "react";
import { Card } from "../../ui/card";
import { Button } from "../../ui/button";
import { Badge } from "../../ui/badge";
import { Progress } from "../../ui/progress";
import { ScrollArea } from "../../ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../ui/select";
import { Slider } from "../../ui/slider";
import { useBrandKit, useBrandColors, useBrandTypography } from "../../../contexts/BrandKitContext";
import { usePodcastProject } from "../../../contexts/PodcastProjectContext";
import { PodcastHighlight, PodcastClip, HighlightType, SocialPlatform, PLATFORM_CLIP_SPECS } from "../../../types/podcasts";
import { 
  Sparkles, 
  Play, 
  Pause,
  Eye,
  Download,
  RefreshCw,
  CheckCircle,
  Star,
  TrendingUp,
  Lightbulb,
  MessageSquare,
  Heart,
  Share,
  Filter,
  Grid,
  List,
  Smartphone,
  Monitor,
  Instagram,
  Youtube,
  Linkedin,
  Twitter
} from "lucide-react";

const HIGHLIGHT_TYPE_OPTIONS = [
  { value: 'all', label: 'Todos los tipos', icon: Grid },
  { value: 'key_insight', label: 'Insight Clave', icon: Lightbulb },
  { value: 'quotable', label: 'Cita Memorable', icon: MessageSquare },
  { value: 'actionable_tip', label: 'Tip Accionable', icon: TrendingUp },
  { value: 'funny_moment', label: 'Momento Divertido', icon: Heart },
  { value: 'story', label: 'Historia', icon: Share },
  { value: 'introduction', label: 'Introducción', icon: Play },
  { value: 'conclusion', label: 'Conclusión', icon: CheckCircle }
];

const SOCIAL_PLATFORM_OPTIONS = [
  { value: 'instagram_reel', label: 'Instagram Reel', icon: Instagram, color: 'from-pink-500 to-purple-600' },
  { value: 'tiktok', label: 'TikTok', icon: TrendingUp, color: 'from-black to-gray-800' },
  { value: 'youtube_shorts', label: 'YouTube Shorts', icon: Youtube, color: 'from-red-500 to-red-600' },
  { value: 'linkedin_video', label: 'LinkedIn Video', icon: Linkedin, color: 'from-blue-600 to-blue-700' },
  { value: 'twitter_video', label: 'Twitter Video', icon: Twitter, color: 'from-blue-400 to-blue-500' }
];

export function HighlightsStep() {
  const { hasBrandKit } = useBrandKit();
  const { primaryColors } = useBrandColors();
  const { primaryFont } = useBrandTypography();
  const { currentProject, addHighlight, updateHighlight, addClip, updateClip, goToPreviousStep, goToNextStep } = usePodcastProject();
  
  const [isGeneratingHighlights, setIsGeneratingHighlights] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  const [selectedHighlights, setSelectedHighlights] = useState<string[]>([]);
  const [filterType, setFilterType] = useState<HighlightType | 'all'>('all');
  const [sortBy, setSortBy] = useState<'score' | 'duration' | 'type'>('score');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [previewHighlightId, setPreviewHighlightId] = useState<string | null>(null);
  const [isGeneratingClips, setIsGeneratingClips] = useState(false);
  const [selectedPlatforms, setSelectedPlatforms] = useState<SocialPlatform[]>(['instagram_reel', 'tiktok']);
  
  const previewRef = useRef<HTMLVideoElement>(null);

  const transcription = currentProject?.transcription;
  const highlights = currentProject?.highlights || [];
  const clips = currentProject?.clips || [];
  const segments = transcription?.segments || [];

  useEffect(() => {
    // Auto-generate highlights if none exist
    if (currentProject && highlights.length === 0 && segments.length > 0) {
      generateHighlights();
    }
  }, [currentProject, segments.length]);

  const generateHighlights = async () => {
    if (!currentProject || segments.length === 0) return;

    setIsGeneratingHighlights(true);
    setGenerationProgress(0);

    try {
      // Simulate AI processing
      const interval = setInterval(() => {
        setGenerationProgress(prev => {
          if (prev >= 100) {
            clearInterval(interval);
            setIsGeneratingHighlights(false);
            createMockHighlights();
            return 100;
          }
          return prev + Math.random() * 15;
        });
      }, 300);

    } catch (error) {
      console.error('Error generating highlights:', error);
      setIsGeneratingHighlights(false);
    }
  };

  const createMockHighlights = () => {
    const mockHighlights: PodcastHighlight[] = [
      {
        id: 'highlight_1',
        startTime: 15,
        endTime: 45,
        title: 'La Importancia de la Planificación',
        description: 'Insight clave sobre por qué la planificación es fundamental',
        transcript: 'Como saben, en nuestra empresa siempre buscamos la excelencia y esto es algo que queremos compartir con ustedes.',
        score: 0.92,
        type: 'key_insight',
        autoGenerated: true,
        approved: false,
        socialPlatforms: ['instagram_reel', 'tiktok', 'linkedin_video']
      },
      {
        id: 'highlight_2',
        startTime: 45,
        endTime: 75,
        title: 'Mi Experiencia Personal',
        description: 'Historia personal que conecta con la audiencia',
        transcript: 'Permíteme contarte mi experiencia personal con este tema, porque creo que puede ser muy valioso para ti.',
        score: 0.88,
        type: 'story',
        autoGenerated: true,
        approved: false,
        socialPlatforms: ['instagram_reel', 'tiktok', 'youtube_shorts']
      },
      {
        id: 'highlight_3',
        startTime: 75,
        endTime: 105,
        title: 'Los 3 Puntos Clave',
        description: 'Tip accionable con pasos concretos',
        transcript: 'Los puntos clave que quiero que recuerdes son tres: primero, la importancia de la planificación; segundo, la ejecución efectiva; y tercero, la medición de resultados.',
        score: 0.95,
        type: 'actionable_tip',
        autoGenerated: true,
        approved: false,
        socialPlatforms: ['instagram_reel', 'tiktok', 'linkedin_video', 'youtube_shorts']
      },
      {
        id: 'highlight_4',
        startTime: 120,
        endTime: 135,
        title: 'Call to Action Final',
        description: 'Conclusión con llamada a la acción clara',
        transcript: 'No olvides suscribirte y compartir con quien creas que le puede servir.',
        score: 0.85,
        type: 'conclusion',
        autoGenerated: true,
        approved: false,
        socialPlatforms: ['instagram_reel', 'tiktok']
      },
      {
        id: 'highlight_5',
        startTime: 0,
        endTime: 15,
        title: 'Introducción Enganchadora',
        description: 'Hook inicial que capta la atención',
        transcript: 'Bienvenidos a este nuevo episodio. Hoy vamos a hablar sobre un tema muy interesante que estoy seguro les va a gustar.',
        score: 0.82,
        type: 'introduction',
        autoGenerated: true,
        approved: false,
        socialPlatforms: ['instagram_reel', 'tiktok', 'youtube_shorts']
      }
    ];

    // Add highlights to project
    mockHighlights.forEach(highlight => {
      addHighlight(highlight);
    });
  };

  const generateClipsForSelectedHighlights = async () => {
    if (selectedHighlights.length === 0 || selectedPlatforms.length === 0) return;

    setIsGeneratingClips(true);

    try {
      const selectedHighlightObjects = highlights.filter(h => selectedHighlights.includes(h.id));
      
      for (const highlight of selectedHighlightObjects) {
        for (const platform of selectedPlatforms) {
          const platformSpecs = PLATFORM_CLIP_SPECS[platform];
          
          const clip: PodcastClip = {
            id: `clip_${highlight.id}_${platform}`,
            highlightId: highlight.id,
            platform,
            title: `${highlight.title} - ${platform}`,
            description: highlight.description,
            duration: highlight.endTime - highlight.startTime,
            format: {
              width: platformSpecs.resolution.width,
              height: platformSpecs.resolution.height,
              aspectRatio: platformSpecs.aspectRatio,
              framerate: 30,
              bitrate: 2000
            },
            captions: generateCaptions(highlight),
            visualElements: generateVisualElements(platform),
            brandElements: {
              colors: hasBrandKit && primaryColors.length > 0 
                ? primaryColors.slice(0, 3).map(c => ({ name: c.name, hex: c.hex, usage: c.usage }))
                : [],
              fonts: primaryFont 
                ? [{ name: primaryFont.name, family: primaryFont.font, weight: primaryFont.weight }]
                : [],
              logos: hasBrandKit ? [{ name: 'Logo Principal', url: '', position: 'bottom-right' }] : [],
              voiceTone: 'engaging',
              brandFrames: []
            },
            status: 'generating'
          };

          addClip(clip);
          
          // Simulate clip generation
          setTimeout(() => {
            updateClip(clip.id, { status: 'ready' });
          }, 2000 + Math.random() * 3000);
        }
      }

      setIsGeneratingClips(false);
    } catch (error) {
      console.error('Error generating clips:', error);
      setIsGeneratingClips(false);
    }
  };

  const generateCaptions = (highlight: PodcastHighlight) => {
    const words = highlight.transcript.split(' ');
    const duration = highlight.endTime - highlight.startTime;
    const wordsPerSecond = words.length / duration;
    
    const captions = [];
    let currentTime = 0;
    
    for (let i = 0; i < words.length; i += 3) {
      const captionWords = words.slice(i, i + 3);
      const captionDuration = captionWords.length / wordsPerSecond;
      
      captions.push({
        id: `caption_${i}`,
        startTime: currentTime,
        endTime: currentTime + captionDuration,
        text: captionWords.join(' '),
        style: {
          fontFamily: primaryFont?.font || 'Inter',
          fontSize: 24,
          fontWeight: '700',
          color: '#FFFFFF',
          backgroundColor: primaryColors[0]?.hex || '#8B5CF6',
          shadow: '2px 2px 4px rgba(0,0,0,0.5)',
          animation: 'fade_in'
        },
        position: {
          x: 10,
          y: 70,
          width: 80,
          height: 15,
          alignment: 'center'
        }
      });
      
      currentTime += captionDuration;
    }
    
    return captions;
  };

  const generateVisualElements = (platform: SocialPlatform) => {
    const elements = [];
    
    // Logo watermark
    elements.push({
      id: 'logo_watermark',
      type: 'logo',
      position: {
        x: platform === 'linkedin_video' ? 5 : 85,
        y: platform === 'linkedin_video' ? 5 : 85,
        width: 10,
        height: 10,
        alignment: 'center'
      },
      style: {
        opacity: 0.8,
        backgroundColor: 'rgba(255,255,255,0.1)',
        borderRadius: 8
      },
      animationIn: 'fade_in',
      animationOut: 'fade_out',
      visible: true
    });
    
    // Progress bar for longer clips
    if (platform === 'linkedin_video' || platform === 'youtube_shorts') {
      elements.push({
        id: 'progress_bar',
        type: 'progress_bar',
        position: {
          x: 10,
          y: 95,
          width: 80,
          height: 2,
          alignment: 'left'
        },
        style: {
          backgroundColor: primaryColors[0]?.hex || '#8B5CF6',
          borderRadius: 2
        },
        visible: true
      });
    }
    
    // Brand frame for vertical videos
    if (platform.includes('reel') || platform === 'tiktok') {
      elements.push({
        id: 'brand_frame',
        type: 'brand_frame',
        position: {
          x: 0,
          y: 0,
          width: 100,
          height: 100,
          alignment: 'center'
        },
        style: {
          borderWidth: 3,
          borderColor: primaryColors[1]?.hex || '#EC4899',
          borderRadius: 12
        },
        visible: true
      });
    }
    
    return elements;
  };

  const toggleHighlightSelection = (highlightId: string) => {
    setSelectedHighlights(prev => 
      prev.includes(highlightId) 
        ? prev.filter(id => id !== highlightId)
        : [...prev, highlightId]
    );
  };

  const approveHighlight = (highlightId: string) => {
    updateHighlight(highlightId, { approved: true });
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getHighlightTypeColor = (type: HighlightType) => {
    const colors = {
      key_insight: 'bg-blue-100 text-blue-800',
      quotable: 'bg-purple-100 text-purple-800',
      actionable_tip: 'bg-green-100 text-green-800',
      funny_moment: 'bg-yellow-100 text-yellow-800',
      story: 'bg-orange-100 text-orange-800',
      introduction: 'bg-gray-100 text-gray-800',
      conclusion: 'bg-indigo-100 text-indigo-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const filteredAndSortedHighlights = highlights
    .filter(h => filterType === 'all' || h.type === filterType)
    .sort((a, b) => {
      switch (sortBy) {
        case 'score': return b.score - a.score;
        case 'duration': return (b.endTime - b.startTime) - (a.endTime - a.startTime);
        case 'type': return a.type.localeCompare(b.type);
        default: return 0;
      }
    });

  const canContinue = highlights.length > 0 && selectedHighlights.length > 0;

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-3">
          <div className="p-3 rounded-xl bg-gradient-to-br from-purple-500 to-blue-600 text-white">
            <Sparkles className="w-6 h-6" />
          </div>
          <h2 className="text-2xl font-bold">Generación de Highlights</h2>
        </div>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          La IA detecta los momentos más importantes de tu contenido y genera clips optimizados para redes sociales con tu BrandKit aplicado.
        </p>
      </div>

      {/* Generation Progress */}
      {isGeneratingHighlights && (
        <Card className="p-6 bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200">
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <div className="relative">
                <Sparkles className="w-6 h-6 text-purple-600" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-purple-400 rounded-full animate-ping"></div>
              </div>
              <h3 className="text-lg font-semibold">Analizando Contenido</h3>
              <Badge className="bg-purple-100 text-purple-800">
                IA Procesando
              </Badge>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Detectando momentos clave con IA...</span>
                <span>{Math.round(generationProgress)}%</span>
              </div>
              <Progress value={generationProgress} className="h-3" />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div className="flex items-center gap-2">
                <TrendingUp className="w-4 h-4 text-purple-600" />
                <span>Analizando engagement potencial</span>
              </div>
              <div className="flex items-center gap-2">
                <MessageSquare className="w-4 h-4 text-purple-600" />
                <span>Identificando quotes memorables</span>
              </div>
              <div className="flex items-center gap-2">
                <Lightbulb className="w-4 h-4 text-purple-600" />
                <span>Aplicando BrandKit</span>
              </div>
            </div>
          </div>
        </Card>
      )}

      {/* Controls */}
      {highlights.length > 0 && (
        <Card className="p-6">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <Filter className="w-4 h-4" />
                <Select value={filterType} onValueChange={(value) => setFilterType(value as HighlightType | 'all')}>
                  <SelectTrigger className="w-48">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {HIGHLIGHT_TYPE_OPTIONS.map(option => {
                      const Icon = option.icon;
                      return (
                        <SelectItem key={option.value} value={option.value}>
                          <div className="flex items-center gap-2">
                            <Icon className="w-4 h-4" />
                            {option.label}
                          </div>
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center gap-2">
                <span className="text-sm">Ordenar:</span>
                <Select value={sortBy} onValueChange={(value) => setSortBy(value as 'score' | 'duration' | 'type')}>
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="score">Score</SelectItem>
                    <SelectItem value="duration">Duración</SelectItem>
                    <SelectItem value="type">Tipo</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center border rounded-lg">
                <Button
                  variant={viewMode === 'grid' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('grid')}
                >
                  <Grid className="w-4 h-4" />
                </Button>
                <Button
                  variant={viewMode === 'list' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('list')}
                >
                  <List className="w-4 h-4" />
                </Button>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Badge variant="outline">
                {highlights.length} highlights • {selectedHighlights.length} seleccionados
              </Badge>
              
              <Button
                onClick={generateHighlights}
                variant="outline"
                disabled={isGeneratingHighlights}
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Regenerar
              </Button>
            </div>
          </div>
        </Card>
      )}

      {/* Highlights Grid/List */}
      {highlights.length > 0 && (
        <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' : 'space-y-4'}>
          {filteredAndSortedHighlights.map((highlight) => {
            const isSelected = selectedHighlights.includes(highlight.id);
            const duration = highlight.endTime - highlight.startTime;
            
            return (
              <Card 
                key={highlight.id}
                className={`p-6 cursor-pointer transition-all ${
                  isSelected 
                    ? 'ring-2 ring-purple-500 bg-purple-50 border-purple-200' 
                    : 'hover:shadow-lg border-gray-200'
                }`}
                onClick={() => toggleHighlightSelection(highlight.id)}
              >
                <div className="space-y-4">
                  {/* Highlight Header */}
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => toggleHighlightSelection(highlight.id)}
                        onClick={(e) => e.stopPropagation()}
                        className="rounded"
                      />
                      <Badge className={getHighlightTypeColor(highlight.type)}>
                        {highlight.type.replace('_', ' ')}
                      </Badge>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <Badge 
                        variant="outline" 
                        className={`text-xs ${
                          highlight.score >= 0.9 ? 'border-green-500 text-green-700' :
                          highlight.score >= 0.8 ? 'border-yellow-500 text-yellow-700' :
                          'border-gray-500 text-gray-700'
                        }`}
                      >
                        {Math.round(highlight.score * 100)}%
                      </Badge>
                      
                      {highlight.approved ? (
                        <CheckCircle className="w-4 h-4 text-green-600" />
                      ) : (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            approveHighlight(highlight.id);
                          }}
                          className="h-6 w-6 p-0"
                        >
                          <Star className="w-3 h-3" />
                        </Button>
                      )}
                    </div>
                  </div>

                  {/* Highlight Content */}
                  <div className="space-y-2">
                    <h4 className="font-medium">{highlight.title}</h4>
                    <p className="text-sm text-muted-foreground">{highlight.description}</p>
                    
                    <div className="text-xs text-gray-600 bg-gray-50 rounded p-2 italic">
                      "{highlight.transcript}"
                    </div>
                  </div>

                  {/* Timing and Platforms */}
                  <div className="space-y-3">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">
                        {formatTime(highlight.startTime)} - {formatTime(highlight.endTime)}
                      </span>
                      <span className="font-medium">{duration}s</span>
                    </div>

                    <div className="space-y-2">
                      <p className="text-xs font-medium text-gray-600">Plataformas sugeridas:</p>
                      <div className="flex flex-wrap gap-1">
                        {highlight.socialPlatforms.map(platform => {
                          const platformOption = SOCIAL_PLATFORM_OPTIONS.find(p => p.value === platform);
                          const Icon = platformOption?.icon || Smartphone;
                          
                          return (
                            <Badge key={platform} variant="secondary" className="text-xs">
                              <Icon className="w-3 h-3 mr-1" />
                              {platform.replace('_', ' ')}
                            </Badge>
                          );
                        })}
                      </div>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button
                      variant={isSelected ? "default" : "outline"}
                      size="sm"
                      onClick={() => toggleHighlightSelection(highlight.id)}
                      className="flex-1"
                    >
                      {isSelected ? (
                        <>
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Seleccionado
                        </>
                      ) : (
                        'Seleccionar'
                      )}
                    </Button>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        setPreviewHighlightId(highlight.id);
                      }}
                    >
                      <Eye className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {/* Clip Generation Section */}
      {selectedHighlights.length > 0 && (
        <Card className="p-6">
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Generar Clips para Redes Sociales</h3>
              <Badge variant="outline">
                {selectedHighlights.length} highlights seleccionados
              </Badge>
            </div>

            {/* Platform Selection */}
            <div className="space-y-3">
              <h4 className="font-medium">Plataformas de Destino</h4>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                {SOCIAL_PLATFORM_OPTIONS.map(platform => {
                  const Icon = platform.icon;
                  const isSelected = selectedPlatforms.includes(platform.value);
                  
                  return (
                    <Card
                      key={platform.value}
                      className={`p-3 cursor-pointer transition-all ${
                        isSelected 
                          ? 'ring-2 ring-purple-500 bg-purple-50' 
                          : 'hover:bg-gray-50'
                      }`}
                      onClick={() => {
                        setSelectedPlatforms(prev => 
                          prev.includes(platform.value)
                            ? prev.filter(p => p !== platform.value)
                            : [...prev, platform.value]
                        );
                      }}
                    >
                      <div className="text-center space-y-2">
                        <div className={`w-8 h-8 mx-auto bg-gradient-to-r ${platform.color} rounded-lg flex items-center justify-center`}>
                          <Icon className="w-4 h-4 text-white" />
                        </div>
                        <h5 className="font-medium text-sm">{platform.label}</h5>
                        <div className="text-xs text-muted-foreground">
                          {PLATFORM_CLIP_SPECS[platform.value].aspectRatio} • 
                          Max {PLATFORM_CLIP_SPECS[platform.value].maxDuration}s
                        </div>
                      </div>
                    </Card>
                  );
                })}
              </div>
            </div>

            {/* Generation Button */}
            <Button
              onClick={generateClipsForSelectedHighlights}
              disabled={isGeneratingClips || selectedPlatforms.length === 0}
              className="w-full bg-purple-500 hover:bg-purple-600"
            >
              {isGeneratingClips ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Generando Clips...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generar {selectedHighlights.length * selectedPlatforms.length} Clips
                </>
              )}
            </Button>
          </div>
        </Card>
      )}

      {/* Generated Clips Preview */}
      {clips.length > 0 && (
        <Card className="p-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Clips Generados</h3>
              <Badge variant="outline">
                {clips.filter(c => c.status === 'ready').length} listos • {clips.filter(c => c.status === 'generating').length} procesando
              </Badge>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {clips.map(clip => {
                const platformOption = SOCIAL_PLATFORM_OPTIONS.find(p => p.value === clip.platform);
                const Icon = platformOption?.icon || Smartphone;
                
                return (
                  <Card key={clip.id} className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <div className={`w-6 h-6 bg-gradient-to-r ${platformOption?.color} rounded flex items-center justify-center`}>
                            <Icon className="w-3 h-3 text-white" />
                          </div>
                          <span className="font-medium text-sm">{platformOption?.label}</span>
                        </div>
                        
                        <Badge className={`text-xs ${
                          clip.status === 'ready' ? 'bg-green-100 text-green-800' :
                          clip.status === 'generating' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {clip.status === 'ready' ? 'Listo' :
                           clip.status === 'generating' ? 'Procesando' :
                           'Error'}
                        </Badge>
                      </div>

                      <div className="aspect-[9/16] bg-gray-100 rounded-lg flex items-center justify-center border">
                        {clip.status === 'ready' ? (
                          <div className="text-center space-y-2">
                            <div className={`w-12 h-12 mx-auto bg-gradient-to-r ${platformOption?.color} rounded-lg flex items-center justify-center`}>
                              <Icon className="w-6 h-6 text-white" />
                            </div>
                            <p className="text-sm font-medium">{clip.format.aspectRatio}</p>
                            <p className="text-xs text-muted-foreground">{Math.round(clip.duration)}s</p>
                          </div>
                        ) : (
                          <div className="text-center space-y-2">
                            <RefreshCw className="w-8 h-8 text-gray-400 animate-spin" />
                            <p className="text-sm text-gray-500">Generando...</p>
                          </div>
                        )}
                      </div>

                      <div className="space-y-2">
                        <h4 className="font-medium text-sm truncate">{clip.title}</h4>
                        <p className="text-xs text-muted-foreground">{clip.description}</p>
                        
                        {clip.status === 'ready' && (
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" className="flex-1">
                              <Eye className="w-3 h-3 mr-1" />
                              Preview
                            </Button>
                            <Button variant="outline" size="sm" className="flex-1">
                              <Download className="w-3 h-3 mr-1" />
                              Descargar
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          </div>
        </Card>
      )}

      {/* Navigation */}
      <div className="flex justify-between">
        <Button variant="outline" onClick={goToPreviousStep}>
          ← Volver a Transcripción
        </Button>
        
        <Button 
          onClick={goToNextStep}
          disabled={!canContinue}
          className="bg-purple-500 hover:bg-purple-600"
        >
          Publicar Contenido →
        </Button>
      </div>

      {!canContinue && highlights.length === 0 && (
        <p className="text-xs text-muted-foreground text-center">
          Espera a que se generen los highlights automáticamente
        </p>
      )}

      {!canContinue && highlights.length > 0 && (
        <p className="text-xs text-muted-foreground text-center">
          Selecciona al menos un highlight para continuar
        </p>
      )}

      {/* Brand Integration Notice */}
      {hasBrandKit && (
        <Card className="p-4 bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
          <div className="flex items-center gap-3">
            <CheckCircle className="w-6 h-6 text-green-600" />
            <div className="flex-1">
              <h4 className="font-medium text-green-800">BrandKit aplicado a clips</h4>
              <p className="text-sm text-green-700">
                Todos los clips incluyen automáticamente tu paleta de colores, tipografías y logos para máxima coherencia visual en redes sociales
              </p>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
}